{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import request from './lib'\nimport repos from './api/repos'\nimport activity from './api/activity'\n\nconst proxy = (scope, instance) => {\n  const p = new Proxy(scope, {\n    get(target, key) {\n      const v = target[key]\n      if (typeof v == 'function') {\n        return v.bind(instance)\n      }\n      return v\n    },\n  })\n  return p\n}\n\n/**\n * A GitHub instance.\n */\nexport default class GitHub {\n  /**\n   * Creates a new instance of the API with the token.\n   * @param {string} token The access token used for requests.\n   */\n  constructor(token) {\n    this._token = token\n    /** @type {repos} */\n    this.repos = proxy(repos, this)\n    /** @type {activity} */\n    this.activity = proxy(activity, this)\n  }\n  async _request(opts = {}) {\n    const res = await request({\n      token: this._token,\n      ...opts,\n    })\n    return res\n  }\n}\n\nexport async function starRepository(token, name, org) {\n  const n = `${org}/${name}`\n  const u = `user/starred/${n}`\n  const { headers } = await request({\n    token,\n    u,\n    method: 'PUT',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    throw new Error(`Could not star the ${n} repository`)\n  }\n}\n\nexport async function deleteRepository(token, name, org) {\n  const n = `${org}/${name}`\n  const u = `repos/${n}`\n  const { headers, body } = await request({\n    token,\n    u,\n    method: 'DELETE',\n  })\n  if (headers.status != '204 No Content') {\n    throw new Error(`Could not delete ${n}: ${body.message}.`)\n  }\n}\n\n/* documentary types/index.xml */\n/**\n * @typedef {Object} CreateRepository Options to create a repository.\n * @prop {string} token The access token.\n * @prop {string} [org] The organisation on which to create the repository (if not adding to the user account).\n * @prop {string} name The name of the repository.\n * @prop {string} [description] A short description of the repository.\n * @prop {string} [homepage] A URL with more information about the repository.\n * @prop {string} [license_template] Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the license_template string. For example, \"mit\" or \"mpl-2.0\".\n * @prop {string} [gitignore_template] Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".\n * @prop {boolean} [auto_init=false] Pass `true` to create an initial commit with empty README. Default `false`.\n */\n"]}